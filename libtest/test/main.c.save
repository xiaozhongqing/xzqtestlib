#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dlfcn.h>

#define RN	"\n"
typedef int	(*pfn_get_int)(void);
typedef char*	(*pfn_get_fun)(int at);

int main(int argc, char** argv)
{
	void* vlib;
	int i, count;
	pfn_get_int fn_version;
	pfn_get_int fn_count;
	pfn_get_fun fn_fun;
	char filename[64] = {0};
	if(argc < 2)
	{
		printf("INFO: ./test libXXX.so  or  ./test libXXX.so Y\n");
		return -1;
	}
	sprintf(filename, "./%s", argv[1]);
	plib = dlopen(filename, RTLD_NOW | RTLD_GLOBAL);
	if(!plib)
	{
		printf("ERROR: dlopen (%s) failed\n", filename);
		return -1;
	}
	fn_version = (pfn_get_int)dlsym(plib, "lib_get_version");
	if(!fn_version)
	{
		printf("ERROR: dlsym (%s) failed\n", "lib_get_version");
		dlclose(plib);
		return -1;
	}
	printf("INFO: %s, version: %08X\n", filename, fn_version());
	
	fn_count = (pfn_get_int)dlsym(plib, "lib_get_count");
	if(!fn_version)
	{
		printf("ERROR: dlsym (%s) failed\n", "lib_get_count");
		dlclose(plib);
		return -1;
	}
	count = fn_count();
	printf("INFO: %s, count: %d\n", filename, count);

	fn_fun = (pf_fun)dlsym(plib, "lib_get_function");
	if(!fn_version)
	{
		printf("ERROR: dlsym (%s) failed\n", "lib_get_function");
		dlclose(plib);
		return -1;
	}
	for(i = 0; i< count; i++)
	{
		printf("INFO: %s, function: %s\n", filename, fn_fun(i
));
	}
	
	return 0;
}

